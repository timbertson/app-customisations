let g:pathsep = ':'
if has("win32")
	let g:pathsep = ';'
	if exists("$PWD")
		" at least start in the right directory when launched from mingw / cygwin
		cd $PWD
	endif
endif

if has("mac") && has("gui_running") && !exists('g:vscode')
	set macmeta
endif

if stridx(&shell, "fish") != -1
	" vim and fish: worst of friends
	set shellpipe="2>&1|tee"
endif

" defaults for indent-finder when no other preference is clear from the file
let g:indent_preferred_expandtab=0
let g:indent_finder_default_style="tab"
let g:indent_finder_default_width="2"

if has('nvim')
	tnoremap <Esc> <C-\><C-n>
	tnoremap <leader><Esc> <Esc>
" double-backtick for toggling the terminal
	let g:neoterm_autoinsert=1
	" not sure which of these will grow on me...
	nnoremap `` :Ttoggle<cr>
	let $NVIM_TERMINAL = 1

	" pass some handy shortcuts through normal-mode
	autocmd TermOpen * nnoremap <buffer> <C-r> a<C-r><C-\><C-n>
	autocmd TermOpen * nnoremap <buffer> <C-c> a<C-c><C-\><C-n>
	autocmd TermOpen * nnoremap <buffer> <tab> a

	" and break out of insert mode via window-switching
	tmap <A-J> <esc><A-J>
	tmap <A-K> <esc><A-K>
else
	" nice defaults which nvim already uses
	set autoindent                 " Indent at the same level of the previous line
	set autoread                   " Automatically read a file changed outside of vim
	set backspace=indent,eol,start " Backspace for dummies
	set complete-=i                " Exclude files completion
	set display=lastline           " Show as much as possible of the last line
	set encoding=utf-8             " Set default encoding
	set history=10000              " Maximum history record
	set incsearch                  " Find as you type search
	set laststatus=2               " Always show status line
	set smarttab                   " Smart tab
	set ttyfast                    " Faster redrawing
	set viminfo+=!                 " Viminfo include !
	set wildmenu                   " Show list instead of just completing
	set ttymouse=xterm2
endif

set mouse=a                    " Automatically enable mouse usage
set nohlsearch                   " Highlight search terms
set noexpandtab
set cursorline
" Ruby scrolls horribly slow with cursorline
autocmd FileType ruby setlocal norelativenumber nocursorline

set ignorecase
set smartcase
set scrolloff=3
set sidescrolloff=5
set wildmode=longest,list
set cinkeys-=#
" allow status-bar windows (0-height)
set wmh=0

" reload filetype detection
filetype off
filetype plugin indent on

syntax on
syntax sync minlines=200 " don't lose track of syntax highlighting when in large syntax blocks

"highlight any spaces that are followed by a tab (the horror!)
" and any _single_ space that comes after ^\t+ (this is usually accedental)
" and also trailing spaces
autocmd ColorScheme * highlight ExtraWhitespace ctermfg=red guifg=red term=undercurl cterm=undercurl gui=undercurl
au InsertEnter * match
au InsertLeave * match ExtraWhitespace /\S\zs\s\+$\|\t\zs \ze[^ #*]/

set number
set termguicolors
let g:solarized_contrast="high"
let g:neosolarized_contrast="normal"
let g:solarized_italic=0
let g:neosolarized_vertSplitBgTrans=0
set background="dark"
if has("gui_running")
	color solarized
	if has("win32")
		set guifont=Consolas:h12:cANSI
	elseif has("mac")
		set guifont=Menlo\ Regular:h16
	else
		set guifont=Monospace\ 11
	endif
else
	if exists("$COLORTERM") && $COLORTERM == "truecolor"
		color NeoSolarized
	elseif exists("$TERM_SOLARIZED")
		color solarized
	else
		color ir_black
	endif
end

set textwidth=0
set copyindent
" insert a tab at the start of the line, without messing up existing (mixed) indents
nmap <leader><tab> m'0i<tab><esc>`'l
set noswapfile
set nobackup
set nojoinspaces " just one space after a period (when joining)
" set nofoldenable " I can never remember how to use folding
set autowrite " save file when navigating away from it or using :make (but not on quits, etc)
set wrapmargin=0
set nowrap
set formatoptions=crqln
set guitablabel=%N\ %t\ %m%r
set guioptions-=T "remove toolbar
set guioptions-=m "remove menu bar
set splitright
set splitbelow
set showcmd
set diffopt+=vertical
" set shiftround " round to multiples of shiftwidth for > and <
set wildignore+=*.swp,*.bak,*.pyc,*.class,*.cache
let g:CommandTWildIgnore=&wildignore . ",**/node_modules/*,**/tmp/*,**/_build*/**,**/0inst/**,**/*.0compile/**"
let g:ctrlp_custom_ignore = {
	\ 'dir': 'node_modules,tmp,log,_build,0inst,*.0compile',
	\ }
let g:rust_recommended_style=0 " quit it with your expandtab business
let g:multi_cursor_exit_from_insert_mode=0

set pastetoggle=<F2>
" set sessionoptions="curdir,folds,localoptions,tabpages,winsize"
" autocmd SessionLoadPost * tab ball
" set sessionoptions=blank,buffers,curdir,folds,resize,tabpages,winsize
" command! -narg=0 SSession :mksession! .vimsession
" command! -narg=0 LSession :source .vimsession

fun! FnEmailMode()
	setlocal spell mousemodel=popup
	setlocal wrap linebreak wrapmargin=0
	match none
endfun

fun! Wrap()
	setlocal textwidth=76
	setlocal formatoptions+=at
	match ErrorMsg '\%>78v.\+'
endfun
command! Wrap call Wrap()

fun! NoWrap()
	setlocal textwidth=0
	setlocal formatoptions-=at
	match none
endfun
command! NoWrap call NoWrap()

command! Emailmode call FnEmailMode()

command! -nargs=0 Spaces set et noet< | retab
fun! Tabsize(sz)
	let &l:shiftwidth=0
	let &l:tabstop=a:sz
	let &l:softtabstop=a:sz
endfun
fun! GlobalTabsize(sz)
	let g:indent_preferred_width=a:sz
	let &shiftwidth=0
	let &tabstop=a:sz
	let &softtabstop=a:sz
endfun
command! -nargs=1 Tabsize call Tabsize(<args>)
call GlobalTabsize(2)
let g:sleuth_neighbor_limit=1
" let g:sleuth_debug=1
" let g:sleuth_automatic=1

" stop it python plugin
let g:python_recommended_style=0

" statusbar config:
set statusline=%< " truncation point
set statusline+=\  " leading space
set statusline+=%q " quickfix list
set statusline+=%-.80f\  " filename, left aligned @ 30chars
set statusline+=%#statuslinenc#
set statusline+=\ %m " modified flag
set statusline+=\ %#special#
set statusline+=%r " readonly flag
set statusline+=%#statuslinenc#
set statusline+=\ %l:%c
set statusline+=%=
set statusline+=▸%{SleuthIndicator()} "indentation
" set statusline+=▸%{&et?'space':'tab'}\ %{&sw} "indentation
set statusline+=\ \  " separator
set statusline+=%{&ff} "file format
set statusline+=• " separator
set statusline+=%{strlen(&fenc)?&fenc:'none'} "file encoding
set statusline+=\  "end with a space

" set iskeyword-=_ \" allow underscore to delimit words"

" treat kebab-case as words
set iskeyword+=-


set tags+=.tags
let g:autotagTagsFile=".tags"

" (do it poorly in the terminal, because sometimes utf8 is broken)
fun! Lame_tabs()
	autocmd BufNewFile,BufRead * set list listchars=tab:>\ "(eol)
	set list listchars=tab:>\ "(eol)
endfun
command! LameTabs call Lame_tabs()

" draw tabs
autocmd BufNewFile,BufRead * set list listchars=tab:▸\ "(eol)
set list listchars=tab:▸\ "(eol)


command! -narg=0 NixSyntax call vim_addon_nix#CheckSyntax()

" It's... syntastic!
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {
        \ "mode": "passive",
        \ "active_filetypes": ["python", "nix", "ocaml", "xml", "ruby"],
        \ "passive_filetypes": [] }
let g:syntastic_python_checkers = [ "python" ] " shut up, pylint
let g:syntastic_ocaml_checkers = [] " can't get lwt support working...

" neomake
" let g:neomake_gup_maker = { 'exe': 'gup', 'args': ['compile'] }
" let g:neomake_enabled_makers = ["gup"]
" nnoremap <leader>g :Neomake<cr>
" nnoremap <leader>G :Neomake!<cr>

fun! Save_if_possible()
	if len(expand("%")) > 0 && &buftype == ""
		noautocmd up
	else
		echo "[no file]"
	endif
endfun
autocmd FocusLost * nested call Save_if_possible()

augroup mkd
	autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt spell mousemodel=popup textwidth=70;
augroup END

let g:no_plugin_maps = 1

"" tab left & right
nmap <A-j> :silent call Save_if_possible()<cr>gt
nmap <A-k> :silent call Save_if_possible()<cr>gT

" window management:
" a-JK doesn't get in the way of platform bindings,
nmap <a-J> :silent call Save_if_possible()<cr><c-w>w
nmap <a-K> :silent call Save_if_possible()<cr><c-w>W

nmap <D-J> :silent call Save_if_possible()<cr><c-w>w
nmap <D-K> :silent call Save_if_possible()<cr><c-w>W


" Visually select the text that was last edited/pasted
nmap gV `[V`]

" I have never wanted these, but I do them by accident plenty:
" Stop looking up stuff with `man` by accident!
nnoremap K <nop>
vnoremap K <nop>
" stop swapping case of stuff in visual mode - I meant undo
vmap u <esc>u

" use , for ;
nnoremap , ;
vnoremap , ;
nnoremap ; :
" visual mappings to highlight inside brackets ((like this) and this)
vmap ] i]
vmap [ i[
vmap ) i)
vmap ( i(
vmap ; ib
" indent & brace selection
vmap <leader>} >`<O<bs>{<esc>`>o<bs>}<esc>
nmap c] ci]
nmap c[ ci[
nmap c) ci)
nmap c( ci(
nmap c{ ci{
nmap c} ci}
nmap c; cib
" and keep going ...
" ctrl + b to highlight current word
map <Leader>b viw
" and then keep extending it
vmap <Leader>b o?\<<cr>o2/\><cr>h
" \w should maybe do the same thing?
" nmap <leader>w <c-b>
" vmap <leader>w <c-b>

xmap <Leader>s <Plug>Vsurround
" surround selection with things:
vmap <leader>( <esc>`>a)<esc>`<i(<esc>
vmap <leader>[ <esc>`>a]<esc>`<i[<esc>
"vmap <leader>< <esc>`>a><esc>`<i<<esc>
vmap <leader>{ <esc>`>a}<esc>`<i{<esc>
vmap <leader>' <esc>`>a'<esc>`<i'<esc>
vmap <leader>" <esc>`>a"<esc>`<i"<esc>
vmap <leader>` <esc>`>a`<esc>`<i`<esc>
nmap <leader>' vi'
nmap <leader>" vi"
nmap <leader>[ vi[
nmap <leader>` vi`

" ]] to go to next (/prev) quickfix item
nmap <A-]> :cn<cr>
nmap <A-[> :cp<cr>
augroup quickfix
	autocmd!
	autocmd FileType qf setlocal wrap
augroup END
fun! Close_all_quckfix_windows()
	" NOTE: iterate backwards from, so it doesn't affect the loop when buffers
	" past the closed ones have their numbers shuffled
	let l:b=bufnr('$')
	while l:b > 0
		" echo b
		if getbufvar(b, '&buftype') == 'quickfix'
			exe "bdelete" b
			" echo "bdelete" b
		endif
		let l:b -= 1
	endwhile
endfun
nmap <leader>` :call Close_all_quckfix_windows()<cr>

" + expands a selection in both directions by one character
vmap + loho
vmap - holo

" + to increment a number (used to be c-a, but it hardly deserves such a prominent shortcut)
nnoremap + <c-a>

" ) kills the surrounding characters of a selection
vmap <leader>) <esc>`<hx`>x

" jump to alternate file
nmap <Leader>a :A<cr>
nmap <Leader>A :AS<cr>

" home & end
map <C-l> $
map <C-h> ^
" nul is ctrl-space for terminal
map <nul> ^
map <space> h
map <C-Space> ^
map <S-Space> b
" foward & back words at a time
map <S-h> b
map <S-l> w
" scroll half screen
map <A-l> zL
map <A-h> zH
map <A-Space> zH

" ctrl + backspace for deleting a word
imap <C-BS> <C-W>

" ctrl + space to insert an underscore
imap <C-space> _

" scroll (without moving cursor) on ctrl+j/k
nnoremap <C-k> <C-y>
nnoremap <C-j> <C-e>

vnoremap <C-k> <C-y>
vnoremap <C-j> <C-e>

" I want { and } to match whitespace-only lines, rather than just empty ones
function! Silentjump(pattern)
	let l:prev=@/
	exec (a:pattern)
	let @/=l:prev
endfun

noremap { :silent call Silentjump("?^\\s*$")<cr>
noremap } :silent call Silentjump("/^\\s*$")<cr>
nnoremap <leader>S :set hlsearch!<cr>

vnoremap { ?^\s*$<cr>
vnoremap } /^\s*$<cr>


" add Tcomment overrides
autocmd FileType nix set commentstring=#\ %s
autocmd FileType vala set commentstring=//\ %s
autocmd FileType help set nolist

" option (or alt) + r to redo the previous task
nmap <a-r> :<up><cr>

" ctrl+s to save things!
nmap <C-s> :w<cr>
imap <C-s> <esc>:w<cr>a

" Q to (re) format things
vmap Q Jgqq
" Q to (re) format things
nmap Q gqq

nmap <leader>p V{jo}ko

let g:ctrlp_map=''
let g:ctrlp_working_path_mode=2 " current directory
"let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --cached --other'] " include untracked files
let g:ctrlp_user_command = 'rg --files %s'
let g:ctrlp_switch_buffer = 2

" fuzzy finding mappings
nmap <C-f> :GFiles<cr>
nmap <C-b> :Buffers<cr>
if has("gui_running") && !has("terminal")
	" gvim without a terminal. fzf is rubbish, fallback to ctrlp
	nmap <C-f> :CtrlP<cr>
	nmap <C-b> :CtrlPBuffer<cr>
end

" use rg/ag if available
if executable("rg")
	let g:ackprg = 'rg --vimgrep --no-heading'

	" vim-grepper
	if !exists("g:grepper")
		let g:grepper = {}
	endif
	let g:grepper.tools = ['rg', 'git']
	command! -complete=file -nargs=+ Rg Grepper -tool rg -noprompt -query <args>
	command! -nargs=+ RgBuf Grepper -tool rg -buffers -noprompt -query <args>

elseif executable("ag")
	let g:ackprg = 'ag --nogroup --nocolor --column'
endif

set switchbuf="usetab,split"

" language-server mappings
let g:my_languageclient_select_opts = {
	\ 'gotoCmd': 'split',
	\ }

nmap <leader>/ :call LanguageClient#textDocument_hover()<cr>
nmap <leader>a :call LanguageClient#textDocument_hover()<cr>
nmap <leader>d :call LanguageClient#textDocument_definition(g:my_languageclient_select_opts)<cr>
nmap <leader>t :call LanguageClient#workspace_symbol("", g:my_languageclient_select_opts)<cr>
nmap <leader>g :call LanguageClient#textDocument_documentSymbol()<cr>
" single-chord omnicomplete
set completeopt=menuone,preview " ,noinsert
imap <c-a> <c-x><c-o>
imap <c-o> <c-x><c-o>

" special mappings for when completion is shown:
" use tab to accept
inoremap <tab> <c-r>=pumvisible() ? "\<lt>c-y>" : "\<lt>tab>"<cr>
" use return to accept
" inoremap <cr> <c-r>=pumvisible() ? "\<lt>c-y>" : "\<lt>cr>"<cr>
" use space to accept
" inoremap <space> <c-r>=pumvisible() ? "\<lt>c-y>" : "\<lt>space>"<cr>
" use esc to cancel
" inoremap <esc> <c-r>=pumvisible() ? "\<lt>c-e>" : "\<lt>esc>"<cr>
inoremap <bs> <c-r>=pumvisible() ? "\<lt>c-e>" : "\<lt>bs>"<cr>

nmap g<f7> :call LanguageClient#textDocument_references()<cr>
nmap <leader>p :pclose<cr>
nmap <leader><esc> :pclose<cr>
command! -nargs=0 LC call LanguageClient#startServer()
command! -nargs=0 LCoff call LanguageClient#exit()

let g:LanguageClient_autoStart = 0
let g:LanguageClient_loggingFile="/tmp/languageClient.log"
let g:LanguageClient_serverStderr="/tmp/languageServer.log"
let g:LanguageClient_loggingLevel='INFO'
let g:LanguageClient_useVirtualText=0
let g:LanguageClient_diagnosticsList="Disabled"
let g:LanguageClient_serverCommands = {}
let g:LanguageClient_serverCommands.python = ['pyls']
let g:LanguageClient_serverCommands.rust = ['rls']
let g:LanguageClient_serverCommands.scala = ['node', './server-proxy.js']
let g:LanguageClient_serverCommands.ocaml = ['ocaml-language-server', '--stdio']
let g:LanguageClient_serverCommands.haskell = ['hie']

" stop it!
let g:jsonnet_fmt_on_save = 0

" copy / paste (gvim, with the gui clipboard)
vmap <C-c> "+y

if !exists('g:vscode')
	" leader-e for showing nerd-tree
	nmap <leader>e :NERDTreeToggle<cr>
	nmap <leader>E :NERDTreeFind<cr>

	" find usages
	nmap <A-F7> :Grepper -cword -open -noprompt<cr>
	nmap <leader><F7> :Grepper -cword -open -noprompt<cr>

	" refresh / redraw
	nmap <F5> :syntax sync fromstart<cr>:redraw!<cr>

	" copy full path to clipboard
	nmap <C-c> :silent let @+ = expand("%:p")<cr>

	" map alt+slash to line comment toggle
	map <A-/> :TComment<cr>

	inoremap <C-v> <C-r>+
	cnoremap <C-v> <C-r>+
	" c-v is still sometimes useful for literal <cr> chars, so use <c-l> (mnemonic 'literal')
	cnoremap <C-l> <C-v>
	inoremap <C-l> <C-v>

	" shift-insert for pasting from the selection buffer
	nmap <S-Ins> "*P
	imap <S-Ins> <esc>"*pa
	omap <S-Ins> <C-r>*
	cmap <S-Ins> <c-r>*

	" select all in visual mode
	vmap <C-a> <esc>ggVG
	nmap <C-a> ggVG

	" delete to the "black hole" buffer
	map <S-k> "_d


	" new tab with <leader>T
	nmap <leader>T :tabnew<cr>

	nmap <leader>q :q<cr>
	nmap <leader>Q :tabclose<cr>
end

" silly shift-typos
command! -narg=0 Q :q
command! -narg=0 W :w
command! -narg=0 Wq :wq
command! -narg=0 WQ :wq

command! -narg=0 Xmlformat :%!XMLLINT_INDENT='	' xmllint --format -o - -
command! -narg=0 ClearMarkers :sign unplace *

" pyflakes shouldn't use quickfix; I use that for other stuff!
let g:pyflakes_use_quickfix = 0

if has("win32unix")
	" make `gf` work on windows paths
	set isfname+=:
	set isfname+=\\
	set includeexpr=substitute(system('cygpath\ '.shellescape(v:fname)),'\\n$','','')
end

command! -narg=* Pos call cursor(<f-args>)
command! -narg=1 Col call cursor(line("."), <args>)
